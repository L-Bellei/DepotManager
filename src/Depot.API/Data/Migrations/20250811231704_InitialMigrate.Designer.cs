// <auto-generated />
using System;
using Depot.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Depot.API.Data.Migrations
{
    [DbContext(typeof(DepotContext))]
    [Migration("20250811231704_InitialMigrate")]
    partial class InitialMigrate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Depot.API.Common.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("region");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("street");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.HasIndex("PostalCode", "Street", "Number")
                        .HasDatabaseName("ix_addresses_postal_code_street_number");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("Depot.API.Common.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<Guid>("SectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("sector_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.HasIndex("SectorId")
                        .HasDatabaseName("ix_employees_sector_id");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Depot.API.Common.Entities.Enterprise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_enterprises");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasDatabaseName("ix_enterprises_address_id");

                    b.ToTable("Enterprises", (string)null);
                });

            modelBuilder.Entity("Depot.API.Common.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ProductType")
                        .HasColumnType("integer")
                        .HasColumnName("product_type");

                    b.Property<Guid>("SectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("sector_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("SectorId")
                        .HasDatabaseName("ix_products_sector_id");

                    b.HasIndex("SectorId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_products_sector_id_name");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Depot.API.Common.Entities.Sector", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ResponsibleEmployee")
                        .HasColumnType("uuid")
                        .HasColumnName("responsible_employee");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_sectors");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_sectors_name");

                    b.HasIndex("ResponsibleEmployee")
                        .HasDatabaseName("ix_sectors_responsible_employee");

                    b.ToTable("Sectors", (string)null);
                });

            modelBuilder.Entity("EnterpriseSectors", b =>
                {
                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uuid")
                        .HasColumnName("enterprise_id");

                    b.Property<Guid>("SectorId")
                        .HasColumnType("uuid")
                        .HasColumnName("sector_id");

                    b.HasKey("EnterpriseId", "SectorId")
                        .HasName("pk_enterprise_sectors");

                    b.HasIndex("EnterpriseId")
                        .HasDatabaseName("ix_enterprise_sectors_enterprise_id");

                    b.HasIndex("SectorId")
                        .HasDatabaseName("ix_enterprise_sectors_sector_id");

                    b.ToTable("EnterpriseSectors", (string)null);
                });

            modelBuilder.Entity("Depot.API.Common.Entities.Employee", b =>
                {
                    b.HasOne("Depot.API.Common.Entities.Sector", "Sector")
                        .WithMany("Employees")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_employees_sectors_sector_id");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Depot.API.Common.Entities.Enterprise", b =>
                {
                    b.HasOne("Depot.API.Common.Entities.Address", "Address")
                        .WithOne("Enterprise")
                        .HasForeignKey("Depot.API.Common.Entities.Enterprise", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Enterprises_Address");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Depot.API.Common.Entities.Product", b =>
                {
                    b.HasOne("Depot.API.Common.Entities.Sector", "Sector")
                        .WithMany("Products")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Products_Sectors_SectorId");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Depot.API.Common.Entities.Sector", b =>
                {
                    b.HasOne("Depot.API.Common.Entities.Employee", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleEmployee")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Sectors_ResponsibleEmployee");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("EnterpriseSectors", b =>
                {
                    b.HasOne("Depot.API.Common.Entities.Enterprise", null)
                        .WithMany()
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enterprise_sectors_enterprises_enterprise_id");

                    b.HasOne("Depot.API.Common.Entities.Sector", null)
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enterprise_sectors_sectors_sector_id");
                });

            modelBuilder.Entity("Depot.API.Common.Entities.Address", b =>
                {
                    b.Navigation("Enterprise")
                        .IsRequired();
                });

            modelBuilder.Entity("Depot.API.Common.Entities.Sector", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
